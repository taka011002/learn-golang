package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"learn-golang/src/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string) (*model.User, error) {
	user, err := r.userUseCase.CreateUser(ctx, name)
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:        user.ID,
		Name:      user.Name,
		CreatedAt: user.CreatedAt,
	}, nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, content *string) (*model.Post, error) {
	post, err := r.postUseCase.CreatePost(ctx, title, content)
	if err != nil {
		return nil, err
	}

	return &model.Post{
		ID:        post.ID,
		UserID:    post.UserID,
		Title:     post.Title,
		Content:   post.Content,
		CreatedAt: post.CreatedAt,
	}, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	user, err := r.userUseCase.GetUser(ctx, id)
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:        user.ID,
		Name:      user.Name,
		CreatedAt: user.CreatedAt,
	}, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	post, err := r.postUseCase.GetPost(ctx, id)
	if err != nil {
		return nil, err
	}

	return &model.Post{
		ID:        post.ID,
		UserID:    post.UserID,
		Title:     post.Title,
		Content:   post.Content,
		CreatedAt: post.CreatedAt,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
